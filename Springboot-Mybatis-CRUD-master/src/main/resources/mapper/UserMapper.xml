<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.mybatisdemo1.dao.UserInfoDao">
    <!--查询-->
    <!--getAllUser分页查询注意，如果SELECT语句中有末尾的分号，在查询是会报错，需要将末尾的分号去掉-->
    <select id="getAllUser" resultType="com.example.mybatisdemo1.domin.UserInfo" >
        SELECT * FROM UserInfo
    </select>

    <select id="getOneUser" resultType="com.example.mybatisdemo1.domin.UserInfo" >
        SELECT * FROM UserInfo where userInfoId=#{userInfoId};
    </select>
    <!--注意：拼接语句注意末尾不要有不必要的分号-->
    <select id="getUserByDynamicCondition" resultType="com.example.mybatisdemo1.domin.UserInfo" >
        SELECT * FROM UserInfo
        WHERE 1=1
        <if test="userName != null">
            and userName like #{userName}
        </if>
        <if test="age !=null">
            or age=#{age}
        </if>
        <if test="sex !=null">
            or sex=#{sex}
        </if>
    </select>

    <!--按ID批量查询-->

    <!--批量查询，返回list-->
    <select id="batchSelect" resultType="com.example.mybatisdemo1.domin.UserInfo">
        SELECT * FROM UserInfo where userInfoId in
        <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <!--批量查询，返回Map键值对数据-->
    <select id="batchSelectReturnMap" resultType="java.util.HashMap">
        SELECT * FROM UserInfo where userInfoId in
        <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
            #{item.}
        </foreach>
    </select>

    <!--like模糊查询  LIKE语句要连接String类型数据-->
    <select id="likeSelect" resultType="com.example.mybatisdemo1.domin.UserInfo">
        SELECT * FROM UserInfo
        <where>
            <if test="userName != null and userName != ''">
                AND userName LIKE "%"#{userName}"%"
            </if>
        </where>
    </select>

    <!--插入-->
    <!--这种insert语句不具有通用性，如果sex 不传入值，即使sex在mysql中有默认值，执行后sex也为null，不过mysql定义sex不能为空将不能为空的报错-->
    <!--<insert id="insert" parameterType="com.example.mybatisdemo1.domin.UserInfo" keyColumn="userInfoId" keyProperty="userInfoId" useGeneratedKeys="true">-->
        <!--insert into UserInfo (userName,age,sex) values (#{userName},#{age},#{sex})-->
    <!--</insert>-->

    <!--一种动态的insert语句,更加具有通用性-->
    <sql id="userInfoColumns">
        <trim suffixOverrides=",">
            <if test="userName != null">userName,</if>
            <if test="age != null">age,</if>
            <if test="sex != null">sex,</if>
            <if test="salary != null">salary,</if>
            <if test="regTime != null">regTime,</if>
            <if test="completed != null">completed,</if>
            <if test="remark != null">remark</if>
        </trim>
    </sql>

    <sql id="userInfoValues">
        <trim suffixOverrides=",">
            <if test="userName != null">#{userName},</if>
            <if test="age != null">#{age},</if>
            <if test="sex != null">#{sex},</if>
            <if test="salary != null">#{salary},</if>
            <if test="regTime != null">#{regTime},</if>
            <if test="completed != null">#{completed},</if>
            <if test="remark != null">#{remark}</if>
        </trim>
    </sql>

    <insert id="insert" parameterType="com.example.mybatisdemo1.domin.UserInfo" keyColumn="userInfoId" keyProperty="userInfoId" useGeneratedKeys="true">
        insert into UserInfo(<include refid="userInfoColumns"/>)
        values (<include refid="userInfoValues"/>)
    </insert>

    <!--批量插入-->
    <sql id="userInfoColumnsList">
        <trim suffixOverrides=",">
            <if test="item.userName != null">userName,</if>
            <if test="item.age != null">age,</if>
            <if test="item.sex != null">sex,</if>
            <if test="item.salary != null">salary,</if>
            <if test="item.completed != null">completed,</if>
            <if test="item.remark != null">remark</if>
        </trim>
    </sql>
    <sql id="userInfoValuesList">
        <trim suffixOverrides=",">
            <if test="item.userName != null">#{item.userName},</if>
            <if test="item.age != null">#{item.age},</if>
            <if test="item.sex != null">#{item.sex},</if>
            <if test="item.salary != null">#{item.salary},</if>
            <if test="item.completed != null">#{item.completed},</if>
            <if test="item.remark != null">#{item.remark}</if>
        </trim>
    </sql>

    <!--测试批量插入成功，但是这种方式要求所有字段都具有值-->
    <!--会构造出这样的语句insert into UserInfo(userName,age,sex,salary,completed,remar) VALUES(...),(...),(...)-->
    <!--<insert id="batchInsert" parameterType="com.example.mybatisdemo1.domin.UserInfo" keyColumn="userInfoId" keyProperty="userInfoId" useGeneratedKeys="true">-->
        <!--insert into UserInfo(userName,age,sex,salary,completed,remark) VALUES-->
        <!--<foreach item="item" index="index" collection="list" separator=",">-->
            <!--(<include refid="userInfoValuesList"/>)-->
        <!--</foreach>-->
    <!--</insert>-->

    <!--测试动态批量插入成功,注意application.yml数据库设置要加上&allowMultiQueries=true,否者提示SQLSyntaxErrorException-->
    <insert id="batchInsert" parameterType="com.example.mybatisdemo1.domin.UserInfo" keyColumn="userInfoId" keyProperty="userInfoId" useGeneratedKeys="true">

        <foreach item="item" index="index" collection="list" separator=";">
        insert into UserInfo(<include refid="userInfoColumnsList"/>)
        VALUES(<include refid="userInfoValuesList"/>)
        </foreach>

    </insert>




    <!--更新-->
    <!--这种方式同样不具有灵活性，如果某个不能为空的字段不传入值，例如userName，将报错-->
    <!--<update id="update" parameterType="com.example.mybatisdemo1.domin.UserInfo">-->
        <!--update UserInfo-->
        <!--set-->
            <!--userInfoId=#{userInfoId},-->
            <!--userName=#{userName},-->
            <!--age=#{age},-->
            <!--sex=#{sex},-->
            <!--salary=#{salary},-->
            <!--completed=#{completed},-->
            <!--remark=#{remark}-->
        <!--where userInfoId=#{userInfoId}-->
    <!--</update>-->

    <!--加入判断的动态update语句更具有灵活性-->
    <update id="update" parameterType="com.example.mybatisdemo1.domin.UserInfo">
        update UserInfo
        <trim prefix="set" suffixOverrides=",">
            <if test="userName != null">userName=#{userName},</if>
            <if test="age != null">age=#{age},</if>
            <if test="sex != null">sex=#{sex},</if>
            <if test="salary != null">salary=#{salary},</if>
            <if test="completed != null">completed=#{completed},</if>
            <if test="remark != null">remark=#{remark},</if>
        </trim>
        where userInfoId=#{userInfoId}
    </update>

    <update id="updateById" parameterType="com.example.mybatisdemo1.domin.UserInfo" >
        update UserInfo set userInfoId=#{userInfoId},userName=#{userName},age=#{age},sex=#{sex} where userInfoId=#{userInfoId}
    </update>

    <!--动态伪批量更新，<set></set>相当于SET-->
    <!--为何是伪批量，因为下列语句中还是逐条更新sql语句地执行，这种方式每次都会连接数据库，然后更新，再释放连接资源，效率低-->
    <update id="batchUpdate" parameterType="com.example.mybatisdemo1.domin.UserInfo">
        <foreach collection="list" item="item" index="index" open="" close="" separator=";">
            update UserInfo

            <set>
                <if test="item.userName != null">userName=#{item.userName},</if>
                <if test="item.age != null">age=#{item.age},</if>
                <if test="item.sex != null">sex=#{item.sex},</if>
                <if test="item.salary != null">salary=#{item.salary},</if>
                <if test="item.completed != null">completed=#{item.completed},</if>
                <if test="item.remark != null">remark=#{item.remark}</if>
            </set>
            where userInfoId = #{item.userInfoId}
        </foreach>
    </update>

    <!--真正的批量更新-->

    <!--单一字段(age)的批量更新-->
    <update id="batchUpdateOneField" parameterType="com.example.mybatisdemo1.domin.UserInfo">
        update UserInfo
        set age=
        <foreach collection="list" item="item" index="index"
                 separator=" " open="case" close="end">
            when userInfoId=#{item.userInfoId} then #{item.age}
        </foreach>
        where userInfoId in
        <foreach collection="list" index="index" item="item"
                 separator="," open="(" close=")">
            #{item.userInfoId}
        </foreach>
    </update>

    <!--多个字段的批量更新-->
    <update id="batchUpdateMultiField" parameterType="com.example.mybatisdemo1.domin.UserInfo">
        update UserInfo
        <trim prefix="set" suffixOverrides=",">
            <trim prefix="userName = case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.userName != null"> when userInfoId=#{item.userInfoId} then #{item.userName}</if>
                </foreach>
            </trim>

            <trim prefix="age =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.age != null">when userInfoId=#{item.userInfoId} then #{item.age}</if>
                </foreach>
            </trim>

            <trim prefix="sex =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.sex != null">when userInfoId=#{item.userInfoId} then #{item.sex}</if>
                </foreach>
            </trim>

            <trim prefix="salary =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.salary != null">when userInfoId=#{item.userInfoId} then #{item.salary}</if>
                </foreach>
            </trim>

            <trim prefix="completed =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.completed != null">when userInfoId=#{item.userInfoId} then #{item.completed}</if>
                </foreach>
            </trim>

            <trim prefix="remark =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.remark != null">when userInfoId=#{item.userInfoId} then #{item.remark}</if>
                </foreach>
            </trim>
        </trim>
        where userInfoId in
        <foreach collection="list" index="index" item="item" separator="," open="(" close=")">
            #{item.userInfoId}
        </foreach>
    </update>

    <!--删除-->
    <delete id="delete" parameterType="com.example.mybatisdemo1.domin.UserInfo">
        delete from UserInfo where userInfoId = #{userInfoId}
    </delete>
    <!--批量删除-->
    <delete id="batchDelete" parameterType="com.example.mybatisdemo1.domin.UserInfo">
        delete from UserInfo where userInfoId
        in
        <foreach collection="list" item="item" index="index" open="(" close=")" separator=",">
          #{item}
        </foreach>
    </delete>

</mapper>
